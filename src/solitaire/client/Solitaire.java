package solitaire.client;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.Iterator;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import solitaire.adt.*;
import solitaire.entity.*;

/**
 *
 * @author USER
 */
public class Solitaire extends javax.swing.JFrame {

    /**
     * Creates new form Solitaire
     */
    public Solitaire() {
        initComponents();
        initUI();
        initCards();
        initializeAudio();
        initializeList();
        formatHighScore();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        menuScreen = new javax.swing.JPanel();
        titleText = new javax.swing.JLabel();
        newGameBtn = new javax.swing.JButton();
        rankScreenBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        highScore = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        CardSlot1 = new javax.swing.JPanel();
        CardSlot2 = new javax.swing.JPanel();
        CardSlot3 = new javax.swing.JPanel();
        CardSlot4 = new javax.swing.JPanel();
        CardSlot5 = new javax.swing.JPanel();
        CardSlot6 = new javax.swing.JPanel();
        CardSlot7 = new javax.swing.JPanel();
        CardSlot8 = new javax.swing.JPanel();
        DrawSlot = new javax.swing.JPanel();
        ScoreAndMove = new java.awt.Label();
        WinSlot = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuScreen.setBackground(new java.awt.Color(204, 204, 255));

        titleText.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        titleText.setText("Spider Solitaire");

        newGameBtn.setFont(new java.awt.Font("Showcard Gothic", 0, 10)); // NOI18N
        newGameBtn.setText("New Game");
        newGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameBtnActionPerformed(evt);
            }
        });

        rankScreenBtn.setFont(new java.awt.Font("Showcard Gothic", 0, 10)); // NOI18N
        rankScreenBtn.setText("High Score");
        rankScreenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankScreenBtnActionPerformed(evt);
            }
        });

        highScore.setColumns(20);
        highScore.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        highScore.setRows(5);
        jScrollPane1.setViewportView(highScore);

        javax.swing.GroupLayout menuScreenLayout = new javax.swing.GroupLayout(menuScreen);
        menuScreen.setLayout(menuScreenLayout);
        menuScreenLayout.setHorizontalGroup(
            menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuScreenLayout.createSequentialGroup()
                .addGroup(menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuScreenLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rankScreenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(menuScreenLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(titleText))
                    .addGroup(menuScreenLayout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        menuScreenLayout.setVerticalGroup(
            menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuScreenLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(titleText)
                .addGap(63, 63, 63)
                .addComponent(newGameBtn)
                .addGap(32, 32, 32)
                .addComponent(rankScreenBtn)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLayeredPane1.setBackground(new java.awt.Color(153, 255, 102));

        CardSlot1.setPreferredSize(new java.awt.Dimension(63, 100));

        javax.swing.GroupLayout CardSlot1Layout = new javax.swing.GroupLayout(CardSlot1);
        CardSlot1.setLayout(CardSlot1Layout);
        CardSlot1Layout.setHorizontalGroup(
            CardSlot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot1Layout.setVerticalGroup(
            CardSlot1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot2.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot2Layout = new javax.swing.GroupLayout(CardSlot2);
        CardSlot2.setLayout(CardSlot2Layout);
        CardSlot2Layout.setHorizontalGroup(
            CardSlot2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot2Layout.setVerticalGroup(
            CardSlot2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot3.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot3Layout = new javax.swing.GroupLayout(CardSlot3);
        CardSlot3.setLayout(CardSlot3Layout);
        CardSlot3Layout.setHorizontalGroup(
            CardSlot3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot3Layout.setVerticalGroup(
            CardSlot3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot4.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot4Layout = new javax.swing.GroupLayout(CardSlot4);
        CardSlot4.setLayout(CardSlot4Layout);
        CardSlot4Layout.setHorizontalGroup(
            CardSlot4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot4Layout.setVerticalGroup(
            CardSlot4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot5.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot5Layout = new javax.swing.GroupLayout(CardSlot5);
        CardSlot5.setLayout(CardSlot5Layout);
        CardSlot5Layout.setHorizontalGroup(
            CardSlot5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot5Layout.setVerticalGroup(
            CardSlot5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot6.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot6Layout = new javax.swing.GroupLayout(CardSlot6);
        CardSlot6.setLayout(CardSlot6Layout);
        CardSlot6Layout.setHorizontalGroup(
            CardSlot6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot6Layout.setVerticalGroup(
            CardSlot6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot7.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot7Layout = new javax.swing.GroupLayout(CardSlot7);
        CardSlot7.setLayout(CardSlot7Layout);
        CardSlot7Layout.setHorizontalGroup(
            CardSlot7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot7Layout.setVerticalGroup(
            CardSlot7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        CardSlot8.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout CardSlot8Layout = new javax.swing.GroupLayout(CardSlot8);
        CardSlot8.setLayout(CardSlot8Layout);
        CardSlot8Layout.setHorizontalGroup(
            CardSlot8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        CardSlot8Layout.setVerticalGroup(
            CardSlot8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        DrawSlot.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout DrawSlotLayout = new javax.swing.GroupLayout(DrawSlot);
        DrawSlot.setLayout(DrawSlotLayout);
        DrawSlotLayout.setHorizontalGroup(
            DrawSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        DrawSlotLayout.setVerticalGroup(
            DrawSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        ScoreAndMove.setBackground(new java.awt.Color(240, 240, 240));
        ScoreAndMove.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ScoreAndMove.setText("Move: 0 Score: 1000");

        WinSlot.setPreferredSize(new java.awt.Dimension(63, 84));

        javax.swing.GroupLayout WinSlotLayout = new javax.swing.GroupLayout(WinSlot);
        WinSlot.setLayout(WinSlotLayout);
        WinSlotLayout.setHorizontalGroup(
            WinSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );
        WinSlotLayout.setVerticalGroup(
            WinSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 84, Short.MAX_VALUE)
        );

        jLayeredPane1.setLayer(CardSlot1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(CardSlot8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DrawSlot, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(ScoreAndMove, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(WinSlot, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(CardSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CardSlot7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(WinSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DrawSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardSlot8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(ScoreAndMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(ScoreAndMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CardSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CardSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DrawSlot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WinSlot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menuScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menuScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rankScreenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankScreenBtnActionPerformed

        if (ranking_display == 1) {
            highScore.setVisible(true);
            ranking_display--;
        } else {
            highScore.setVisible(false);
            ranking_display++;
        }
    }//GEN-LAST:event_rankScreenBtnActionPerformed

    private void newGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameBtnActionPerformed
        menuScreen.setVisible(false);
        highScore.setVisible(false);
        jLayeredPane1.setVisible(true);
    }//GEN-LAST:event_newGameBtnActionPerformed

    Point initialPoint = null;
    Point xyDifference = null;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Solitaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Solitaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Solitaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Solitaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Solitaire().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel CardSlot1;
    public javax.swing.JPanel CardSlot2;
    public javax.swing.JPanel CardSlot3;
    public javax.swing.JPanel CardSlot4;
    public javax.swing.JPanel CardSlot5;
    public javax.swing.JPanel CardSlot6;
    public javax.swing.JPanel CardSlot7;
    public javax.swing.JPanel CardSlot8;
    public javax.swing.JPanel DrawSlot;
    public java.awt.Label ScoreAndMove;
    public javax.swing.JPanel WinSlot;
    public javax.swing.JTextArea highScore;
    public javax.swing.JLayeredPane jLayeredPane1;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPopupMenu jPopupMenu1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JPanel menuScreen;
    public javax.swing.JButton newGameBtn;
    public javax.swing.JButton rankScreenBtn;
    public javax.swing.JLabel titleText;
    // End of variables declaration//GEN-END:variables

    //Change to Card class
    private final static int CARD_NUM = 91;
    DragLabel labels[] = new DragLabel[CARD_NUM];
    JPanel cardSlots[] = new JPanel[8];

    Deck initialDeck = new Deck();
    DrawDeck drawCards = new DrawDeck();
    //Change to linked list
    ArrList<DragLabel> cardsInSlot1 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot2 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot3 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot4 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot5 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot6 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot7 = new ArrList<>();
    ArrList<DragLabel> cardsInSlot8 = new ArrList<>();
    ArrList<ArrList<DragLabel>> cardSlotsList = new ArrList<>();
    ArrList<DragLabel> cardsDragged = new ArrList<>();
    ArrayQueue<DragLabel> drawCardSlot = new ArrayQueue<>();

    private ArrList<AudioClip> audioClips = new ArrList<AudioClip>();
    private ArrList<Sound> sound = new ArrList<Sound>();

    private SortedListInterface<Player> player = new SortedLinkedList<>();
    int score = 1000;
    int move = 0;
    int ranking_display = 1;

    //Initializes the cards
    private void initCards() {
        cardSlots[0] = CardSlot1;
        cardSlots[1] = CardSlot2;
        cardSlots[2] = CardSlot3;
        cardSlots[3] = CardSlot4;
        cardSlots[4] = CardSlot5;
        cardSlots[5] = CardSlot6;
        cardSlots[6] = CardSlot7;
        cardSlots[7] = CardSlot8;

        //var listener = new DragMouseAdapter();
        int i = 0;
        int verticalLength = 7;
        final int CARD_SLOTS = 8;
        int iterator = 0;

        initialDeck.initDeck();
        initialDeck.shuffle();

        for (int j = 0; j < CARD_SLOTS; j++) {
            for (i = 0; i < verticalLength; i++) {
                labels[iterator] = new DragLabel();
                if (i == verticalLength - 1) {
                    labels[iterator].valid = true;
                } else {
                    labels[iterator].valid = false;
                }
                System.out.println(initialDeck.getCards().peek());
                labels[iterator].value = initialDeck.getCards().pop().getNumber();
                labels[iterator].setCards(labels[iterator].value);

                //System.out.println("Test" + iterator);
                labels[iterator].setBounds(cardSlots[j].getX(), cardSlots[j].getY() + (20 * i), 63, 84);

                switch (j) {
                    case 0 ->
                        cardsInSlot1.add(labels[iterator]);
                    case 1 ->
                        cardsInSlot2.add(labels[iterator]);
                    case 2 ->
                        cardsInSlot3.add(labels[iterator]);
                    case 3 ->
                        cardsInSlot4.add(labels[iterator]);
                    case 4 ->
                        cardsInSlot5.add(labels[iterator]);
                    case 5 ->
                        cardsInSlot6.add(labels[iterator]);
                    case 6 ->
                        cardsInSlot7.add(labels[iterator]);
                    case 7 ->
                        cardsInSlot8.add(labels[iterator]);

                }

                jLayeredPane1.add(labels[iterator]);
                iterator++;

            }
            if (j >= 2 && j < 3) {
                verticalLength--;
            }
            //verticalLength++;
        }

        //draw decks goes here
        //initial deck have 40 cards remaining
        drawCards.insertDeck(initialDeck);
        for (int j = 0; j < 40; j++) {
            labels[iterator] = new DragLabel();
            labels[iterator].value = drawCards.getCards().deQueue().getNumber();
            labels[iterator].setCards(labels[iterator].value);
            labels[iterator].setBounds(DrawSlot.getX(), DrawSlot.getY(), 63, 84);
            drawCardSlot.enQueue(labels[iterator]);
            jLayeredPane1.add(labels[iterator]);
            iterator++;
        }

        //verticalLength = 6;
        layerCards(CARD_NUM);

        cardSlotsList.add(cardsInSlot1);
        cardSlotsList.add(cardsInSlot2);
        cardSlotsList.add(cardsInSlot3);
        cardSlotsList.add(cardsInSlot4);
        cardSlotsList.add(cardsInSlot5);
        cardSlotsList.add(cardsInSlot6);
        cardSlotsList.add(cardsInSlot7);
        cardSlotsList.add(cardsInSlot8);

        jLayeredPane1.revalidate();
        jLayeredPane1.repaint();
    }

    private void initializeAudio() {
        String url;

        //♬ Sound Effect for Taking Card (Line 637)
        url = "sounds/Card_Take.wav";
        audioClips.add(Applet.newAudioClip(this.getClass().getResource(url)));
        sound.add(new Sound(1, "Card_Take"));

        //♬ Sound Effect for Putting Card (Line 700)
        url = "sounds/Card_Put.wav";
        audioClips.add(Applet.newAudioClip(this.getClass().getResource(url)));
        sound.add(new Sound(2, "Card_Put"));

        //♬ BGM for the game (Loop available)
        try {
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(this.getClass().getResource("sounds/BGM.wav"));
            Clip clip = AudioSystem.getClip();
            clip.open(audioIn);
            clip.start();
            clip.loop(Clip.LOOP_CONTINUOUSLY);
            System.out.println("BGM started");
        } catch (Exception exception) {
            System.out.println("Cannot play the BGM");
        }
        sound.add(3, new Sound(3, "BGM"));
    }

    private void layerCards(int cardNum) {
        int m = 0;
        for (int k = cardNum - 1; k >= 0; k--) {
            System.out.println(k);
            jLayeredPane1.setComponentZOrder(labels[m], k);
            m++;
        }

        jLayeredPane1.setComponentZOrder(CardSlot1, cardNum + 10);
        jLayeredPane1.setComponentZOrder(CardSlot2, cardNum + 9);
        jLayeredPane1.setComponentZOrder(CardSlot3, cardNum + 8);
        jLayeredPane1.setComponentZOrder(CardSlot4, cardNum + 7);
        jLayeredPane1.setComponentZOrder(CardSlot5, cardNum + 6);
        jLayeredPane1.setComponentZOrder(CardSlot6, cardNum + 5);
        jLayeredPane1.setComponentZOrder(CardSlot7, cardNum + 4);
        jLayeredPane1.setComponentZOrder(CardSlot8, cardNum + 3);
    }

    private void initUI() {
        menuScreen.setVisible(true);
        jLayeredPane1.setVisible(false);
        highScore.setVisible(false);
    }

    private void initializeList() {
        player.add(new Player(500, 135, "Kenny"));
        player.add(new Player(450, 140, "Tiger"));
        player.add(new Player(330, 152, "Lion"));
    }

    private String formatHighScore() {
        String opRank = "HIGH SCORE || MOVE || NAME\n";
        Iterator<Player> ps = player.getIterator();
        int i = 0;

        while (ps.hasNext()) {
            Player p = ps.next();

            highScore.setText(opRank += (i + 1) + ". " + p.getScore() + "                  "
                    + p.getMove() + "         " + p.getName() + "\n");
            i++;
        }
        return opRank;
    }

    public class DragLabel extends JLabel {

        private BufferedImage img;
        private final Point imgPoint = new Point(0, 0);
        private Point oriPoint;
        private Icon icon;
        private final int X_DRAG_OFFSET = jLayeredPane1.getX() + 6;
        private final int Y_DRAG_OFFSET = jLayeredPane1.getY() + 30;
        private final Component component = this;
        private int cardIndex = 0;
        private int cardSlotIndex = -1;
        private boolean valid = false; //faceUp?
        private int value = 0;

        public DragLabel() {
            MouseAdapter ma = new MouseAdapter() {
                private Point xyDifference;

                @Override
                public void mousePressed(MouseEvent e) {
                    Rectangle bounds = getImageBounds();

                    Point mp = e.getPoint();
                    Point mousePoint = e.getLocationOnScreen();

                    oriPoint = getLocation();
                    //if cursor is over the card
                    if (bounds.contains(mp)) {
                        xyDifference = new Point();
                        xyDifference.x = mp.x - bounds.x;
                        xyDifference.y = mp.y - bounds.y;
                        audioClips.get(0).play();

                        //if its over slot 8 and valid
                        if (mouseOverDrawCard(mousePoint)) {
                            distCards();
                        }
                        if (mouseOverCardSlotAndValid(mousePoint, CardSlot8)) {
                            getCards(cardsInSlot8);
                            cardSlotIndex = 7;
                            //if its over slot 7 and valid and so on...
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot7)) {
                            getCards(cardsInSlot7);
                            cardSlotIndex = 6;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot6)) {
                            getCards(cardsInSlot6);
                            cardSlotIndex = 5;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot5)) {
                            getCards(cardsInSlot5);
                            cardSlotIndex = 4;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot4)) {
                            getCards(cardsInSlot4);
                            cardSlotIndex = 3;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot3)) {
                            getCards(cardsInSlot3);
                            cardSlotIndex = 2;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot2)) {
                            getCards(cardsInSlot2);
                            cardSlotIndex = 1;
                        } else if (mouseOverCardSlotAndValid(mousePoint, CardSlot1)) {
                            getCards(cardsInSlot1);
                            cardSlotIndex = 0;
                        }
                    }
                }

                private boolean mouseOverCardSlotAndValid(Point mousePoint, JPanel cardSlot) {
                    return mousePoint.getLocation().x > cardSlot.getLocation().x && mousePoint.getLocation().x <= cardSlot.getLocation().x + img.getWidth() && valid;
                }

                private boolean mouseOverDrawCard(Point mousePoint) {
                    return mousePoint.getLocation().x > DrawSlot.getLocation().x && mousePoint.getLocation().y > DrawSlot.getLocation().y
                            && mousePoint.getLocation().x <= DrawSlot.getLocation().x + img.getWidth() && mousePoint.getLocation().y <= DrawSlot.getLocation().y + img.getHeight();
                }

                private boolean cardOverCardSlot(JPanel cardSlot) {
                    return getLocation().x + (img.getWidth() / 2) >= cardSlot.getLocation().x && getLocation().x + (img.getWidth() / 2) < cardSlot.getLocation().x + img.getWidth();
                }

                private void getCards(ArrList<DragLabel> cardsInSlot) {
                    for (int j = 0; j < cardsInSlot.getLength(); j++/*DragLabel label : cardsInSlot*/) {
                        DragLabel label = cardsInSlot.get(j);
                        if (label == component) {
                            //This can be further refactored to .split()
                            System.out.println("cardIndex = " + cardIndex + ", cardsInSlot.getLength() = " + cardsInSlot.getLength());
                            for (int i = cardIndex; i < cardsInSlot.getLength(); i++) {
                                cardsDragged.add(cardsInSlot.get(i));
                            }
                            for (int i = cardsInSlot.getLength() - 1; i > cardIndex - 1; i--) {
                                cardsInSlot.remove(i + 1);
                            }
                            break;
                        } else {
                            cardIndex++;
                        }
                    }
                }

                private void distCards() {
                    for (int i = 0; i < 8; i++) {
                        jLayeredPane1.setComponentZOrder(drawCardSlot.getFront(), 0);
                        cardSlotsList.get(i).add(drawCardSlot.deQueue());
                        cardSlotsList.get(i).get(cardSlotsList.get(i).getLength() - 1).valid = true;
                        cardSlotsList.get(i).get(cardSlotsList.get(i).getLength() - 1).setCards(cardSlotsList.get(i).get(cardSlotsList.get(i).getLength() - 1).value);
                        cardSlotsList.get(i).get(cardSlotsList.get(i).getLength() - 1).setLocation(cardSlots[i].getX(), cardSlots[i].getY() + (20 * (cardSlotsList.get(i).getLength() - 1)));

                    }
                    System.out.println("drawCard");
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    xyDifference = null;
                    Point mousePoint = e.getLocationOnScreen();
                    audioClips.get(1).play();
                    move++;
                    score -= 10;
                    ScoreAndMove.setText("Move :" + move + " " + "Score :" + score);

                    //snaps the card to slot 1, clears the temp arraylist
                    if (cardOverCardSlot(CardSlot1) && cardSlotIndex != 0 && checkCard(cardsInSlot1)) {
                        snapCardsToCardSlot(CardSlot1, cardsInSlot1);
                    } else if (cardOverCardSlot(CardSlot2) && cardSlotIndex != 1 && checkCard(cardsInSlot2)) {
                        snapCardsToCardSlot(CardSlot2, cardsInSlot2);
                    } else if (cardOverCardSlot(CardSlot3) && cardSlotIndex != 2 && checkCard(cardsInSlot3)) {
                        snapCardsToCardSlot(CardSlot3, cardsInSlot3);
                    } else if (cardOverCardSlot(CardSlot4) && cardSlotIndex != 3 && checkCard(cardsInSlot4)) {
                        snapCardsToCardSlot(CardSlot4, cardsInSlot4);
                    } else if (cardOverCardSlot(CardSlot5) && cardSlotIndex != 4 && checkCard(cardsInSlot5)) {
                        snapCardsToCardSlot(CardSlot5, cardsInSlot5);
                    } else if (cardOverCardSlot(CardSlot6) && cardSlotIndex != 5 && checkCard(cardsInSlot6)) {
                        snapCardsToCardSlot(CardSlot6, cardsInSlot6);
                    } else if (cardOverCardSlot(CardSlot7) && cardSlotIndex != 6 && checkCard(cardsInSlot7)) {
                        snapCardsToCardSlot(CardSlot7, cardsInSlot7);
                    } else if (cardOverCardSlot(CardSlot8) && cardSlotIndex != 7 && checkCard(cardsInSlot8)) {
                        snapCardsToCardSlot(CardSlot8, cardsInSlot8);
                    } else {
                        revertBackToPreviousCardSlot();
                    }
                    cardIndex = 0;

                    //win condition
                    //if(checkWinPiles(cardsInSlot1)) {
                    //  pushToWinPiles(cardsInSlot1)
                    //} repeat 8 times for other card slots
                    /*if(checkWinPiles(cardsInSlot1)){
                    pushToWinPiles(cardsInSlot1);
                    }
                    if(checkWinPiles(cardsInSlot2)){
                    pushToWinPiles(cardsInSlot2);
                    }
                    if(checkWinPiles(cardsInSlot3)){
                    pushToWinPiles(cardsInSlot3);
                    }
                    if(checkWinPiles(cardsInSlot4)){
                    pushToWinPiles(cardsInSlot4);
                    }
                    if(checkWinPiles(cardsInSlot5)){
                    pushToWinPiles(cardsInSlot5);
                    }
                    if(checkWinPiles(cardsInSlot6)){
                    pushToWinPiles(cardsInSlot6);
                    }
                    if(checkWinPiles(cardsInSlot7)){
                    pushToWinPiles(cardsInSlot7);
                    }
                    if(checkWinPiles(cardsInSlot8)){
                    pushToWinPiles(cardsInSlot8);
                    }*/
                }

                //  checkWinPiles(cardsInSlot1) {
                //  get last card
                //  get previous card x 13 (for-loop) {
                //      if last card value == previous card value - 1:
                //          valid = true
                //      else:
                //          valid = false
                //      if valid = false:
                //          return false
                //  }
                //  return true
                public boolean checkWinPiles(ArrList<DragLabel> cardInSlot) {

                    for (int i = 0; i < 12; i++) {

                        if (cardInSlot.get(cardInSlot.getLength() - i) == cardInSlot.get(cardInSlot.getLength() - (i - 1))) {
                            valid = true;
                        } else {
                            valid = false;
                        }

                        if (valid == false) {
                            return false;
                        }
                    }
                    return true;
                }

                //pushToWinPiles(cardsInSlot) {
                //  splitIndex = cardsInSlot1.length() - 13 (+- 1)
                //  piles = cardsInSlot.split(splitIndex)
                //  for each cards in piles:
                //      card.setLocation(WinSlot.getX(), WinSlot.getY());
                //}
                /*public void pushToWinPiles(ArrList<DragLabel> cardsInSlot){
                splitIndex = cardsInSlot1.length() - 13 (+- 1)
                piles = cardsInSlot.split(splitIndex)
                for each cards in piles:
                card.setLocation(WinSlot.getX(), WinSlot.getY());
                
                }*/
                private void snapCardsToCardSlot(JPanel cardSlot, ArrList<DragLabel> cardsInSlot) {
                    int yOffset = 20;
                    System.out.println("snap cards cardsDragged.getLength() = " + cardsDragged.getLength());
                    for (int i = 0; i < cardsDragged.getLength(); i++) {
                        //sets the location
                        jLayeredPane1.setComponentZOrder(cardsDragged.get(i), 0);
                        cardsDragged.get(i).setLocation(cardSlot.getLocation().x, (cardSlot.getLocation().y + (yOffset * cardsInSlot.getLength())));
                        cardsInSlot.add(cardsDragged.get(i)); //.join()
                    }

                    if (cardIndex - 1 != -1) {
                        //if linked list i think can just change the .get(cardIndex - 1)
                        cardSlotsList.get(cardSlotIndex).get(cardIndex - 1).valid = true;
                        cardSlotsList.get(cardSlotIndex).get(cardIndex - 1).setCards(cardSlotsList.get(cardSlotIndex).get(cardIndex - 1).value);
                    }

                    cardsDragged.clear();
                }

                private void revertBackToPreviousCardSlot() {
                    int yOffset = 20;
                    for (int i = 0; i < cardsDragged.getLength(); i++) {
                        //sets the location
                        jLayeredPane1.setComponentZOrder(cardsDragged.get(i), 0);
                        cardsDragged.get(i).setLocation(oriPoint.x, (cardSlots[cardSlotIndex].getLocation().y + (yOffset * cardSlotsList.get(cardSlotIndex).getLength())));

                        cardSlotsList.get(cardSlotIndex).add(cardsDragged.get(i));
                    }

                    cardsDragged.clear();
                }

                @Override
                public void mouseDragged(MouseEvent e) {
                    if (xyDifference != null) {
                        Point mousePoint = e.getLocationOnScreen();
                        //calculates how much to move the object
                        Point movePoint = new Point(mousePoint.x - oriPoint.x - xyDifference.x - X_DRAG_OFFSET, mousePoint.y - oriPoint.y - xyDifference.y - Y_DRAG_OFFSET);

                        int yOffset = 0;

                        for (int i = 0; i < cardsDragged.getLength(); i++) {
                            //sets the location
                            jLayeredPane1.setComponentZOrder(cardsDragged.get(i), 0);
                            cardsDragged.get(i).setLocation((oriPoint.x + movePoint.x), (oriPoint.y + movePoint.y + (yOffset * 20)));
                            yOffset++;
                        }

                        revalidate();
                        repaint();
                    }
                }

                //linked list
                private boolean checkCard(ArrList<DragLabel> cardsInSlot) {
                    //get the last card in <cardInSlot1>

                    //get the first card in <cardsDragged>
                    //check if first card's value is exactly last card's value - 1
                    if (!cardsDragged.isEmpty()) {
                        DragLabel firstCardInDrag = cardsDragged.get(0);
                        DragLabel lastCardInSlot = cardsInSlot.get(cardsInSlot.getLength() - 1);
                        return lastCardInSlot.value - 1 == firstCardInDrag.value;
                    }
                    return false;
                }
            };
            addMouseListener(ma);
            addMouseMotionListener(ma);
        }

        protected Rectangle getImageBounds() {
            icon = this.getIcon();
            img = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
            Rectangle bounds = new Rectangle(0, 0, 0, 0);
            if (img != null) {
                bounds.setLocation(imgPoint);
                bounds.setSize(img.getWidth(), img.getHeight());
            }
            return bounds;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
        }

        protected void setCards(int value) {
            if (!valid) {
                setIcon(new ImageIcon(getClass().getResource("/solitaire/client/image/cardback.png")));
            } else {
                System.out.println(value);
                setIcon(new ImageIcon(getClass().getResource("/solitaire/client/image/card" + value + ".png")));
            }
        }
    }
}
